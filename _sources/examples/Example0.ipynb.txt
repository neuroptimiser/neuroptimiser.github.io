{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "# Example 0: The Simplest Neuroptimiser\n",
    "This example demonstrates how to use the Neuroptimiser library to solve a dummy optimisation problem."
   ],
   "id": "8adf569f028839ad"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 1. Setup\n",
    "Import minimal necessary libraries."
   ],
   "id": "fb33b2b07c748040"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:21.830992Z",
     "start_time": "2025-08-11T11:40:21.827818Z"
    }
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from neuroptimiser import NeurOptimiser"
   ],
   "outputs": [],
   "execution_count": 43
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 2. Quick problem and optimiser setup\n",
    "We define a simple optimisation problem with a fitness function and bounds."
   ],
   "id": "f3a7caa4f24c16a2"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:21.845218Z",
     "start_time": "2025-08-11T11:40:21.842391Z"
    }
   },
   "cell_type": "code",
   "source": [
    "problem_function    = lambda x: np.linalg.norm(x)\n",
    "problem_bounds      = np.array([[-5.0, 5.0], [-5.0, 5.0]])"
   ],
   "id": "ffcbc9470bdb0f38",
   "outputs": [],
   "execution_count": 44
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Then, we instantiate the Neuroptimiser with the default configurations.",
   "id": "f3bc216156714f0c"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:21.852542Z",
     "start_time": "2025-08-11T11:40:21.849706Z"
    }
   },
   "cell_type": "code",
   "source": [
    "optimiser = NeurOptimiser()\n",
    "#optimiser = NeurOptimiser(core_params={\"hs_operator\": \"directional\", \"hs_variant\": \"pbest\"})\n",
    "# selector_params={\"sel_mode\": \"greedy\"}"
   ],
   "id": "8c6f19c161e212f2",
   "outputs": [],
   "execution_count": 45
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:21.861486Z",
     "start_time": "2025-08-11T11:40:21.858552Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Show the overall configuration parameters of the optimiser\n",
    "print(\"DEFAULT CONFIG PARAMS:\\n\", optimiser.config_params, \"\\n\")\n",
    "print(\"DEFAULT CORE PARAMS:\\n\", optimiser.core_params)\n",
    "print(\"\\nDEFAULT SELECTOR PARAMS:\\n\", optimiser.selector_params, \"\\n\")"
   ],
   "id": "cdf20b3ac7c0167f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEFAULT CONFIG PARAMS:\n",
      " {'neuron_topology': '2dr', 'spiking_core': 'TwoDimSpikingCore', 'core_params': {}, 'search_space': array([[-1,  1],\n",
      "       [-1,  1]]), 'unit_topology': '2dr', 'seed': 69, 'function': None, 'num_agents': 10, 'num_dimensions': 2, 'num_neighbours': 1, 'num_iterations': 300} \n",
      "\n",
      "DEFAULT CORE PARAMS:\n",
      " [{'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}, {'thr_min': 1e-06, 'hs_variant': 'fixed', 'spk_cond': 'fixed', 'approx': 'rk4', 'coeffs': 'random', 'seed': None, 'thr_k': 0.05, 'ref_mode': 'pg', 'hs_operator': 'fixed', 'thr_max': 1.0, 'max_steps': 100, 'is_bounded': False, 'alpha': 1.0, 'dt': 0.01, 'thr_mode': 'diff_pg', 'spk_alpha': 0.25, 'name': 'linear', 'noise_std': 0.1, 'thr_alpha': 1.0}]\n",
      "\n",
      "DEFAULT SELECTOR PARAMS:\n",
      " {} \n",
      "\n"
     ]
    }
   ],
   "execution_count": 46
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 3. Optimisation process\n",
    "We proceed to solve the optimisation problem using the `solve` method of the `NeurOptimiser` process. In this example, we enable the debug mode to get more detailed output during the optimisation process."
   ],
   "id": "23ebe893982271b9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:36.007112Z",
     "start_time": "2025-08-11T11:40:21.872607Z"
    }
   },
   "cell_type": "code",
   "source": [
    "optimiser.solve(\n",
    "    obj_func=problem_function,\n",
    "    search_space=problem_bounds,\n",
    "    debug_mode=True,\n",
    "    num_iterations=1000,\n",
    ")"
   ],
   "id": "15d44d1385cd700b",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[neuropt:log] Debug mode is enabled. Monitoring will be activated.\n",
      "[neuropt:log] Parameters are set up.\n",
      "[neuropt:log] Initial positions and topologies are set up.\n",
      "[neuropt:log] Tensor contraction layer, neighbourhood manager, and high-level selection unit are created.\n",
      "[neuropt:log] Population of nheuristic units is created.\n",
      "[neuropt:log] Connections between nheuristic units and auxiliary processes are established.\n",
      "[neuropt:log] Monitors are set up.\n",
      "[neuropt:log] Starting simulation with 1000 iterations...\n",
      "... step: 0, best fitness: 0.6424241065979004\n",
      "... step: 100, best fitness: 0.025011446326971054\n",
      "... step: 200, best fitness: 0.019809743389487267\n",
      "... step: 300, best fitness: 0.01837228797376156\n",
      "... step: 400, best fitness: 0.015472172759473324\n",
      "... step: 500, best fitness: 0.015472172759473324\n",
      "... step: 600, best fitness: 0.015472172759473324\n",
      "... step: 700, best fitness: 0.015472172759473324\n",
      "... step: 800, best fitness: 0.015472172759473324\n",
      "... step: 900, best fitness: 0.01039238553494215\n",
      "... step: 999, best fitness: 0.01039238553494215\n",
      "[neuropt:log] Simulation completed. Fetching monitor data... done\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([0.00928941, 0.00465906]), array([0.01039239]))"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 47
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## (Optional) 4. Results processing and visualisation\n",
    "We process the results obtained from the optimiser and visualise the absolute error in fitness values over the optimisation steps."
   ],
   "id": "8b985328ea61fba7"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:36.032480Z",
     "start_time": "2025-08-11T11:40:36.026702Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Recover the results from the optimiser\n",
    "fp              = optimiser.results[\"fp\"]\n",
    "fg              = optimiser.results[\"fg\"]\n",
    "positions       = np.array(optimiser.results[\"p\"])\n",
    "best_position   = np.array(optimiser.results[\"g\"])\n",
    "v1              = np.array(optimiser.results[\"v1\"])\n",
    "v2              = np.array(optimiser.results[\"v2\"])\n",
    "\n",
    "# Calculate the absolute error in fitness values\n",
    "efp             = np.abs(np.array(fp))\n",
    "efg             = np.abs(np.array(fg))\n",
    "\n",
    "# Convert the spikes to integer type\n",
    "spikes          = np.array(optimiser.results[\"s\"]).astype(int)\n",
    "\n",
    "# Print some minimal information about the results\n",
    "print(f\"fg: {fg[-1][0]:.4f}, f*: {0.0:.4f}, error: {efg[-1][0]:.4e}\")\n",
    "print(f\"norm2(g - x*): {np.linalg.norm(best_position[-1]):.4e}\")\n",
    "print(f\"{v1.min():.4f} <= v1 <= {v1.max():.4f}\")\n",
    "print(f\"{v2.min():.4f} <= v2 <= {v2.max():.4f}\")"
   ],
   "id": "2ce73f98f2651bcb",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fg: 0.0104, f*: 0.0000, error: 1.0392e-02\n",
      "norm2(g - x*): 1.0392e-02\n",
      "-0.6664 <= v1 <= 1.1091\n",
      "-1.0177 <= v2 <= 2.8301\n"
     ]
    }
   ],
   "execution_count": 48
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:36.385578Z",
     "start_time": "2025-08-11T11:40:36.037861Z"
    }
   },
   "cell_type": "code",
   "source": [
    "fig, ax = plt.subplots(figsize=(6.9, 6.9*0.618))\n",
    "\n",
    "plt.plot(efp, color=\"silver\", alpha=0.5)\n",
    "plt.plot(np.max(efp, axis=1), '--', color=\"red\", label=r\"Max.\")\n",
    "plt.plot(np.average(efp, axis=1), '--', color=\"black\", label=r\"Mean\")\n",
    "plt.plot(np.median(efp, axis=1), '--', color=\"blue\", label=r\"Median\")\n",
    "plt.plot(efg, '--', color=\"green\", label=r\"Min.\")\n",
    "\n",
    "plt.xlabel(r\"Step, $t$\")\n",
    "plt.ylabel(r\"Abs. Error, $\\varepsilon_f$\")\n",
    "\n",
    "lgd = plt.legend(ncol=2, loc=\"lower left\")\n",
    "\n",
    "plt.xscale(\"log\")\n",
    "plt.yscale(\"log\")\n",
    "\n",
    "ax.patch.set_alpha(0)\n",
    "fig.tight_layout()"
   ],
   "id": "359cbb6cd7c18d57",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 690x426.42 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 49
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T11:40:36.394262Z",
     "start_time": "2025-08-11T11:40:36.392103Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "40460738c6fa4fb9",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
