{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "# Example 0: The Simplest Neuroptimiser\n",
    "This example demonstrates how to use the Neuroptimiser library to solve a dummy optimisation problem."
   ],
   "id": "8adf569f028839ad"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 1. Setup\n",
    "Import minimal necessary libraries."
   ],
   "id": "fb33b2b07c748040"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:30.105253Z",
     "start_time": "2025-06-04T13:28:30.053286Z"
    }
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from neuroptimiser import NeurOptimiser"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 2. Quick problem and optimiser setup\n",
    "We define a simple optimisation problem with a fitness function and bounds."
   ],
   "id": "f3a7caa4f24c16a2"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:30.235421Z",
     "start_time": "2025-06-04T13:28:30.232689Z"
    }
   },
   "cell_type": "code",
   "source": [
    "problem_function    = lambda x: np.linalg.norm(x)\n",
    "problem_bounds      = np.array([[-5.0, 5.0], [-5.0, 5.0]])"
   ],
   "id": "ffcbc9470bdb0f38",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Then, we instantiate the Neuroptimiser with the default configurations.",
   "id": "f3bc216156714f0c"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:30.245989Z",
     "start_time": "2025-06-04T13:28:30.243143Z"
    }
   },
   "cell_type": "code",
   "source": "optimiser = NeurOptimiser()",
   "id": "8c6f19c161e212f2",
   "outputs": [],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:30.259858Z",
     "start_time": "2025-06-04T13:28:30.257392Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Show the overall configuration parameters of the optimiser\n",
    "print(\"DEFAULT CONFIG PARAMS:\\n\", optimiser.config_params, \"\\n\")\n",
    "print(\"DEFAULT CORE PARAMS:\\n\", optimiser.core_params)"
   ],
   "id": "cdf20b3ac7c0167f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEFAULT CONFIG PARAMS:\n",
      " {'unit_topology': '2dr', 'function': None, 'num_neighbours': 1, 'num_dimensions': 2, 'seed': 69, 'neuron_topology': '2dr', 'search_space': array([[-1,  1],\n",
      "       [-1,  1]]), 'num_iterations': 300, 'num_agents': 10, 'spiking_core': 'TwoDimSpikingCore', 'core_params': {}} \n",
      "\n",
      "DEFAULT CORE PARAMS:\n",
      " [{'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}, {'alpha': 1.0, 'name': 'linear', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'thr_k': 0.05, 'hs_operator': 'fixed', 'dt': 0.01, 'thr_alpha': 1.0, 'max_steps': 100, 'ref_mode': 'pg', 'approx': 'rk4', 'spk_cond': 'fixed', 'noise_std': 0.1, 'seed': None, 'is_bounded': False, 'spk_alpha': 0.25, 'thr_mode': 'diff_pg', 'thr_max': 1.0, 'coeffs': 'random'}]\n"
     ]
    }
   ],
   "execution_count": 4
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 3. Optimisation process\n",
    "We proceed to solve the optimisation problem using the `solve` method of the `NeurOptimiser` process. In this example, we enable the debug mode to get more detailed output during the optimisation process."
   ],
   "id": "23ebe893982271b9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:34.902631Z",
     "start_time": "2025-06-04T13:28:30.281986Z"
    }
   },
   "cell_type": "code",
   "source": [
    "optimiser.solve(\n",
    "    obj_func=problem_function,\n",
    "    search_space=problem_bounds,\n",
    "    debug_mode=True\n",
    ")"
   ],
   "id": "15d44d1385cd700b",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[neuropt:log] Debug mode is enabled. Monitoring will be activated.\n",
      "[neuropt:log] Parameters are set up.\n",
      "[neuropt:log] Initial positions and topologies are set up.\n",
      "[neuropt:log] Tensor contraction layer, neighbourhood manager, and high-level selection unit are created.\n",
      "[neuropt:log] Population of nheuristic units is created.\n",
      "[neuropt:log] Connections between nheuristic units and auxiliary processes are established.\n",
      "[neuropt:log] Monitors are set up.\n",
      "[neuropt:log] Starting simulation with 300 iterations...\n",
      "... step: 0, best fitness: 0.5136707425117493\n",
      "... step: 30, best fitness: 0.05325897037982941\n",
      "... step: 60, best fitness: 0.01755695417523384\n",
      "... step: 90, best fitness: 0.01755695417523384\n",
      "... step: 120, best fitness: 0.011273802258074284\n",
      "... step: 150, best fitness: 0.011273802258074284\n",
      "... step: 180, best fitness: 0.011273802258074284\n",
      "... step: 210, best fitness: 0.011273802258074284\n",
      "... step: 240, best fitness: 0.011273802258074284\n",
      "... step: 270, best fitness: 0.011273802258074284\n",
      "... step: 299, best fitness: 0.00820532999932766\n",
      "[neuropt:log] Simulation completed. Fetching monitor data... done\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([-0.00522663,  0.00632504]), array([0.00820533]))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## (Optional) 4. Results processing and visualisation\n",
    "We process the results obtained from the optimiser and visualise the absolute error in fitness values over the optimisation steps."
   ],
   "id": "8b985328ea61fba7"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:34.917641Z",
     "start_time": "2025-06-04T13:28:34.912891Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Recover the results from the optimiser\n",
    "fp              = optimiser.results[\"fp\"]\n",
    "fg              = optimiser.results[\"fg\"]\n",
    "positions       = np.array(optimiser.results[\"p\"])\n",
    "best_position   = np.array(optimiser.results[\"g\"])\n",
    "v1              = np.array(optimiser.results[\"v1\"])\n",
    "v2              = np.array(optimiser.results[\"v2\"])\n",
    "\n",
    "# Calculate the absolute error in fitness values\n",
    "efp             = np.abs(np.array(fp))\n",
    "efg             = np.abs(np.array(fg))\n",
    "\n",
    "# Convert the spikes to integer type\n",
    "spikes          = np.array(optimiser.results[\"s\"]).astype(int)\n",
    "\n",
    "# Print some minimal information about the results\n",
    "print(f\"fg: {fg[-1][0]:.4f}, f*: {0.0:.4f}, error: {efg[-1][0]:.4e}\")\n",
    "print(f\"norm2(g - x*): {np.linalg.norm(best_position[-1]):.4e}\")\n",
    "print(f\"{v1.min():.4f} <= v1 <= {v1.max():.4f}\")\n",
    "print(f\"{v2.min():.4f} <= v2 <= {v2.max():.4f}\")"
   ],
   "id": "2ce73f98f2651bcb",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fg: 0.0082, f*: 0.0000, error: 8.2053e-03\n",
      "norm2(g - x*): 8.2051e-03\n",
      "-1.5829 <= v1 <= 1.4996\n",
      "-1.7358 <= v2 <= 0.9703\n"
     ]
    }
   ],
   "execution_count": 6
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-04T13:28:35.325807Z",
     "start_time": "2025-06-04T13:28:34.944601Z"
    }
   },
   "cell_type": "code",
   "source": [
    "fig, ax = plt.subplots(figsize=(6.9, 6.9*0.618))\n",
    "\n",
    "plt.plot(efp, color=\"silver\", alpha=0.5)\n",
    "plt.plot(np.max(efp, axis=1), '--', color=\"red\", label=r\"Max.\")\n",
    "plt.plot(np.average(efp, axis=1), '--', color=\"black\", label=r\"Mean\")\n",
    "plt.plot(np.median(efp, axis=1), '--', color=\"blue\", label=r\"Median\")\n",
    "plt.plot(efg, '--', color=\"green\", label=r\"Min.\")\n",
    "\n",
    "plt.xlabel(r\"Step, $t$\")\n",
    "plt.ylabel(r\"Abs. Error, $\\varepsilon_f$\")\n",
    "\n",
    "lgd = plt.legend(ncol=2, loc=\"lower left\")\n",
    "\n",
    "plt.xscale(\"log\")\n",
    "plt.yscale(\"log\")\n",
    "\n",
    "ax.patch.set_alpha(0)\n",
    "fig.tight_layout()"
   ],
   "id": "359cbb6cd7c18d57",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 690x426.42 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 7
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
