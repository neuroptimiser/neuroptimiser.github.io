{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "# Example 0: The Simplest Neuroptimiser\n",
    "This example demonstrates how to use the Neuroptimiser library to solve a dummy optimisation problem."
   ],
   "id": "8adf569f028839ad"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 1. Setup\n",
    "Import minimal necessary libraries."
   ],
   "id": "fb33b2b07c748040"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:25.117768Z",
     "start_time": "2025-08-11T12:25:25.094815Z"
    }
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from neuroptimiser import NeurOptimiser"
   ],
   "outputs": [],
   "execution_count": 8
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 2. Quick problem and optimiser setup\n",
    "We define a simple optimisation problem with a fitness function and bounds."
   ],
   "id": "f3a7caa4f24c16a2"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:25.127640Z",
     "start_time": "2025-08-11T12:25:25.122988Z"
    }
   },
   "cell_type": "code",
   "source": [
    "problem_function    = lambda x: np.linalg.norm(x)\n",
    "problem_bounds      = np.array([[-5.0, 5.0], [-5.0, 5.0]])"
   ],
   "id": "ffcbc9470bdb0f38",
   "outputs": [],
   "execution_count": 9
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Then, we instantiate the Neuroptimiser with the default configurations.",
   "id": "f3bc216156714f0c"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:25.141162Z",
     "start_time": "2025-08-11T12:25:25.132577Z"
    }
   },
   "cell_type": "code",
   "source": [
    "optimiser = NeurOptimiser()\n",
    "#optimiser = NeurOptimiser(core_params={\"hs_operator\": \"directional\", \"hs_variant\": \"pbest\"})\n",
    "# selector_params={\"sel_mode\": \"greedy\"}"
   ],
   "id": "8c6f19c161e212f2",
   "outputs": [],
   "execution_count": 10
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:25.152934Z",
     "start_time": "2025-08-11T12:25:25.147100Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Show the overall configuration parameters of the optimiser\n",
    "print(\"DEFAULT CONFIG PARAMS:\\n\", optimiser.config_params, \"\\n\")\n",
    "print(\"DEFAULT CORE PARAMS:\\n\", optimiser.core_params)\n",
    "print(\"\\nDEFAULT SELECTOR PARAMS:\\n\", optimiser.selector_params, \"\\n\")"
   ],
   "id": "cdf20b3ac7c0167f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEFAULT CONFIG PARAMS:\n",
      " {'search_space': array([[-1,  1],\n",
      "       [-1,  1]]), 'spiking_core': 'TwoDimSpikingCore', 'num_neighbours': 1, 'num_dimensions': 2, 'num_agents': 10, 'function': None, 'core_params': {}, 'unit_topology': '2dr', 'num_iterations': 300, 'seed': 69, 'neuron_topology': '2dr'} \n",
      "\n",
      "DEFAULT CORE PARAMS:\n",
      " [{'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}, {'spk_alpha': 0.25, 'alpha': 1.0, 'hs_operator': 'fixed', 'coeffs': 'random', 'thr_k': 0.05, 'approx': 'rk4', 'hs_variant': 'fixed', 'thr_min': 1e-06, 'name': 'linear', 'seed': None, 'thr_mode': 'diff_pg', 'dt': 0.01, 'max_steps': 100, 'ref_mode': 'pg', 'is_bounded': False, 'thr_alpha': 1.0, 'spk_cond': 'fixed', 'thr_max': 1.0, 'noise_std': 0.1}]\n",
      "\n",
      "DEFAULT SELECTOR PARAMS:\n",
      " {} \n",
      "\n"
     ]
    }
   ],
   "execution_count": 11
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 3. Optimisation process\n",
    "We proceed to solve the optimisation problem using the `solve` method of the `NeurOptimiser` process. In this example, we enable the debug mode to get more detailed output during the optimisation process."
   ],
   "id": "23ebe893982271b9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:38.082263Z",
     "start_time": "2025-08-11T12:25:25.172069Z"
    }
   },
   "cell_type": "code",
   "source": [
    "optimiser.solve(\n",
    "    obj_func=problem_function,\n",
    "    search_space=problem_bounds,\n",
    "    debug_mode=True,\n",
    "    num_iterations=1000,\n",
    ")"
   ],
   "id": "15d44d1385cd700b",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[neuropt:log] Debug mode is enabled. Monitoring will be activated.\n",
      "[neuropt:log] Parameters are set up.\n",
      "[neuropt:log] Initial positions and topologies are set up.\n",
      "[neuropt:log] Tensor contraction layer, neighbourhood manager, and high-level selection unit are created.\n",
      "[neuropt:log] Population of nheuristic units is created.\n",
      "[neuropt:log] Connections between nheuristic units and auxiliary processes are established.\n",
      "[neuropt:log] Monitors are set up.\n",
      "[neuropt:log] Starting simulation with 1000 iterations...\n",
      "... step: 0, best fitness: 0.6181837916374207\n",
      "... step: 100, best fitness: 0.038434769958257675\n",
      "... step: 200, best fitness: 0.013949169777333736\n",
      "... step: 300, best fitness: 0.010647708550095558\n",
      "... step: 400, best fitness: 0.010264495387673378\n",
      "... step: 500, best fitness: 0.008329018019139767\n",
      "... step: 600, best fitness: 0.008329018019139767\n",
      "... step: 700, best fitness: 0.008329018019139767\n",
      "... step: 800, best fitness: 0.008329018019139767\n",
      "... step: 900, best fitness: 0.008329018019139767\n",
      "... step: 999, best fitness: 0.005041850730776787\n",
      "[neuropt:log] Simulation completed. Fetching monitor data... done\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([-0.00325382, -0.00385125]), array([0.00504185]))"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 12
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## (Optional) 4. Results processing and visualisation\n",
    "We process the results obtained from the optimiser and visualise the absolute error in fitness values over the optimisation steps."
   ],
   "id": "8b985328ea61fba7"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:38.104903Z",
     "start_time": "2025-08-11T12:25:38.099827Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Recover the results from the optimiser\n",
    "fp              = optimiser.results[\"fp\"]\n",
    "fg              = optimiser.results[\"fg\"]\n",
    "positions       = np.array(optimiser.results[\"p\"])\n",
    "best_position   = np.array(optimiser.results[\"g\"])\n",
    "v1              = np.array(optimiser.results[\"v1\"])\n",
    "v2              = np.array(optimiser.results[\"v2\"])\n",
    "\n",
    "# Calculate the absolute error in fitness values\n",
    "efp             = np.abs(np.array(fp))\n",
    "efg             = np.abs(np.array(fg))\n",
    "\n",
    "# Convert the spikes to integer type\n",
    "spikes          = np.array(optimiser.results[\"s\"]).astype(int)\n",
    "\n",
    "# Print some minimal information about the results\n",
    "print(f\"fg: {fg[-1][0]:.4f}, f*: {0.0:.4f}, error: {efg[-1][0]:.4e}\")\n",
    "print(f\"norm2(g - x*): {np.linalg.norm(best_position[-1]):.4e}\")\n",
    "print(f\"{v1.min():.4f} <= v1 <= {v1.max():.4f}\")\n",
    "print(f\"{v2.min():.4f} <= v2 <= {v2.max():.4f}\")"
   ],
   "id": "2ce73f98f2651bcb",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fg: 0.0050, f*: 0.0000, error: 5.0419e-03\n",
      "norm2(g - x*): 5.0418e-03\n",
      "-1.0745 <= v1 <= 0.9227\n",
      "-0.8828 <= v2 <= 0.9703\n"
     ]
    }
   ],
   "execution_count": 13
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:38.388308Z",
     "start_time": "2025-08-11T12:25:38.115230Z"
    }
   },
   "cell_type": "code",
   "source": [
    "fig, ax = plt.subplots(figsize=(6.9, 6.9*0.618))\n",
    "\n",
    "plt.plot(efp, color=\"silver\", alpha=0.5)\n",
    "plt.plot(np.max(efp, axis=1), '--', color=\"red\", label=r\"Max.\")\n",
    "plt.plot(np.average(efp, axis=1), '--', color=\"black\", label=r\"Mean\")\n",
    "plt.plot(np.median(efp, axis=1), '--', color=\"blue\", label=r\"Median\")\n",
    "plt.plot(efg, '--', color=\"green\", label=r\"Min.\")\n",
    "\n",
    "plt.xlabel(r\"Step, $t$\")\n",
    "plt.ylabel(r\"Abs. Error, $\\varepsilon_f$\")\n",
    "\n",
    "lgd = plt.legend(ncol=2, loc=\"lower left\")\n",
    "\n",
    "plt.xscale(\"log\")\n",
    "plt.yscale(\"log\")\n",
    "\n",
    "ax.patch.set_alpha(0)\n",
    "fig.tight_layout()"
   ],
   "id": "359cbb6cd7c18d57",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 690x426.42 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 14
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-11T12:25:38.399521Z",
     "start_time": "2025-08-11T12:25:38.398009Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "40460738c6fa4fb9",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
